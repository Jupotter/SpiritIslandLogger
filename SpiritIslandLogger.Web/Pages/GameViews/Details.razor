@page "/game/{GameId:int}/details"

@using SpiritIslandLogger.Web.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

@if (game == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h3>
        @game.Date.ToString("D")
        @if (game.Adversary is not null)
        {
            @:, @game.Adversary.Name
            @: Level @game.AdversaryLevel
        }
    </h3>
    
    {
        string color = "p-1";
        string text = "";
        string icon;
        @if (game.Victory)
        {
            text += "Victory";
            icon = "oi oi-check";
        }
        else
        {
            text += "Defeat";
            color += "";
            icon = "oi oi-x";
        }
        @if (game.BlightedIsland.HasValue)
        {
            if (game.BlightedIsland.Value)
            {
                color += " bg-secondary";
                text += " (blighted island)";
            }
            else
            {
                color += " text-white bg-success";
                text += " (healthy island)";
            }
        }

        <div class="@color">
            <span class="@icon"></span>
            @text
        </div>
    }
<ul class="list-unstyled">
    @if (game.Score.HasValue)
    {
        <li>Score: @game.Score</li>
    }
    @if (game.DahanLeft.HasValue)
    {
        <li>@game.DahanLeft Dahans on the island</li>
    }

    @if (game.BlightCount.HasValue)
    {
        <li>@game.BlightCount Blights left on the island</li>
    }


    @if (game.InvaderCardsLeft.HasValue)
    {
        <li>@game.InvaderCardsLeft turns left</li>
    }

    @if (game.FearLevel.HasValue)
    {
        <li>Terror level @game.FearLevel reached</li>
    }
    </ul>
    @if (!string.IsNullOrWhiteSpace(game.Comment))
    {
        <blockquote class="blockquote">
            <p>@game.Comment</p>
        </blockquote>
    }
    <div>
        <table id="players" class="table">
            <thead>
            <tr>
                <th scope="col">
                    Player
                </th>
                <th scope="col">
                    Spirit
                </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var player in (game.Players ?? Enumerable.Empty<GamePlayer>()))
            {
                <tr>
                    <td>@player.Player?.Name</td>
                    <td>@player.Spirit?.Name</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

<div>
    @if (game is not null)
    {
        <NavLink href="@editUri"> Edit </NavLink>        @:|
        <NavLink href="@deleteUri"> Delete </NavLink>        @:|
    }
    <a href="/games">Back to List</a>
</div>

@code {
#nullable enable

    [Parameter]
    public int? GameId { get; set; }

    private Game? game;

    private Uri? deleteUri;
    private Uri? editUri;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!GameId.HasValue)
        {
            Navigation.NavigateTo("/games");
            return;
        }

        game = await DbContext.Games
                              .Include(g => g.Adversary)
                              .ThenInclude(a => a.Levels)
                              .Include(g => g.Players)
                              .ThenInclude(gp => gp.Player)
                              .Include(g => g.Players)
                              .ThenInclude(gp => gp.Spirit)
                              .FirstOrDefaultAsync(g => g.Id == GameId);
        if (game is null)
        {
            Navigation.NavigateTo("/games");
            return;
        }
        deleteUri = new Uri(new Uri(Navigation.Uri), "./delete");
        editUri = new Uri(new Uri(Navigation.Uri), "./edit");
    }

}