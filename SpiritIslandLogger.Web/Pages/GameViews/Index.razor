@page "/game"
@page "/games"
@using SpiritIslandLogger.Web.Data
@using Microsoft.EntityFrameworkCore
@using SpiritIslandLogger.Web.Service
@inject ApplicationDbContext Context
@inject ScoreService         ScoreService;

<h3>Games</h3>

<p>
    <NavLink href="game/create">Create new</NavLink>
</p>
@if (games == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date</th>
                <th>Players</th>
                <th>Adversary</th>
                <th>Level</th>
                <th>Victory</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <tr>
                    @{
                        var link = $"/game/{game.Id}/details";
                        <td>@game.Id</td>
                        <td>
                            <NavLink href="@link">
                                @game.Date.ToString("D")
                            </NavLink>
                        </td>
                        <td>
                            <NavLink href="@link">
                                @game.PlayerCount
                            </NavLink>
                        </td>
                        <td>
                            <NavLink href="@link">
                                @if (string.IsNullOrEmpty(game.AdversaryName))
                                {
                                    <span>None</span>
                                }
                                else
                                {
                                    <span>@game.AdversaryName</span>
                                }
                            </NavLink>
                        </td>

                        <td>
                            <NavLink href="@link">
                                @if (game.AdversaryLevel.HasValue)
                                {
                                    <span>@game.AdversaryLevel</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </NavLink>
                        </td>

                        <td>
                            <NavLink href="@link">
                                @game.Victory
                            </NavLink>
                        </td>

                        <td>
                            <NavLink href="@link">
                                @game.Score
                            </NavLink>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="RecalculateScores">Recalculate Scores</button>
<div>
    <label for="recalculate-all-checkbox">Recalculate all</label>
    <input id="recalculate-all-checkbox" type="checkbox" @bind="RecalculateAll"/>
</div>

@code {
#nullable enable
    List<GameListModel>? games;

    bool RecalculateAll { get; set; }

    private record GameListModel(DateTimeOffset Date, int Id, int PlayerCount, string? AdversaryName, int? AdversaryLevel, bool Victory, int? Score);

    protected override async Task OnInitializedAsync()
    {
        var gameQuery = Context.Games
                                       .Include(g => g.Players)
                                       .Include(g => g.Adversary)
                                       .ThenInclude(a => a.Levels)
                                       .AsSingleQuery()
                                       .OrderByDescending(g => g.Date);

        games = await gameQuery.Select(g => new GameListModel(g.Date, g.Id, g.Players.Count, g.Adversary.Name, g.AdversaryLevel, g.Victory, g.Score))
                               .ToListAsync();
    }


    private async Task RecalculateScores()
    {
        IQueryable<Game> games = Context.Games;

        if (!RecalculateAll)
        {
            games = games.Where(g => !g.Score.HasValue);
        }

        foreach (var game in games)
        {
            game.Score = await ScoreService.GetScore(game);
        }
        await Context.SaveChangesAsync();
    }
}