@page "/adversary/{AdversaryId:int}/edit/"

@using SpiritIslandLogger.Web.Data
@using System.ComponentModel.DataAnnotations
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

<h2>Edit</h2>
@if (adversary == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@adversary" OnValidSubmit="@UpdateSpirit">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <label for="Name">Name</label>
            <InputText @bind-Value="adversary.Name" class="form-control" id="Name"></InputText>
            <ValidationMessage For="() => adversary.Name"/>
        </div>
        <div class="form-group">
            <label for="Levels">Levels</label>
            <table id="Levels">
                <thead>
                <tr>
                    <th>
                    </th>
                    <th>
                        Base
                    </th>
                    @for (int i = 1; i <= 6; i++)
                    {
                        <th>
                            Level @i
                        </th>
                    }
                </tr>
                </thead>
                <tbody>
                <tr>
                    <th>Difficulty</th>
                    @foreach (var id in adversary.Levels.Select((item, id) => id))
                    {
                        <td>
                            <InputNumber @bind-Value="adversary.Levels[id].Difficulty"></InputNumber>
                        </td>
                    }
                </tr>
                <tr>
                    <th>Deck Size</th>
                    @foreach (var id in adversary.Levels.Select((item, id) => id))
                    {
                        <td>
                            <InputNumber @bind-Value="adversary.Levels[id].DeckSize"></InputNumber>
                        </td>
                    }
                </tr>
                </tbody>
            </table>
        </div>
        <input type="submit" value="Submit" class="btn btn-primary"/>
    </EditForm>}

@code {
#nullable enable
    

    [Parameter]
    public int? AdversaryId { get; set; }

    private Adversary? adversary;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!AdversaryId.HasValue)
        {
            NavigateToIndex();
            return;
        }

        adversary = await DbContext.Adversaries.FindAsync(AdversaryId);
        if (adversary is null)
        {
            NavigateToIndex();
            return;
        }

        if (adversary.Levels == null || adversary.Levels.Count < 7)
        {
            adversary.Levels = Enumerable.Range(0, 7).Select(i => new AdversaryLevel { Level = i, Difficulty = i + 1}).ToList();
        }
    }

    private async Task UpdateSpirit()
    {
        if (adversary is null)
        {
            NavigateToIndex();
            return;
        }

        DbContext.Adversaries.Update(adversary);
        await DbContext.SaveChangesAsync();

        NavigateToDetails();
    }

    private void NavigateToIndex()
    {
        Navigation.NavigateTo("/adversaries");
    }

    private void NavigateToDetails()
    {
        Navigation.NavigateTo($"/adversary/{AdversaryId}/details");
    }

}